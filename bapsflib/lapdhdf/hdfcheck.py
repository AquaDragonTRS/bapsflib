# This file is part of the bapsflib package, a Python toolkit for the
# BaPSF group at UCLA.
#
# http://plasma.physics.ucla.edu/
#
# Copyright 2017 Erik T. Everson and contributors
#
# License:
#

import h5py

from .hdferrors import *


class hdfCheck(object):
    _hdf_lapd_version = ''
    _msi_group = 'MSI'
    _msi_diagnostic_groups = ['Discharge', 'Gas pressure', 'Heater',
                              'Interferometer array', 'Magnetic field']
    _data_group = 'Raw data + config'
    _print_tab_len = 35

    def __init__(self, hdf_obj):
        if isinstance(hdf_obj, h5py.File):
            self._hdf_obj = hdf_obj
        else:
            raise NotHDFFileError

        self.check_lapd_hdf()
        self.check_msi()
        self.check_data_group()

    def check_lapd_hdf(self):
        """
            Checks the loaded HDF5 file to see if it was generated by
            the LaPD Control System.
        """
        str_print = 'Generated by LaPD '
        if 'lapd' in list(self._hdf_obj.attrs.keys())[0].casefold():
            self._hdf_lapd_version = (list(
                self._hdf_obj.attrs.values())[0])
            str_print += ' yes'.rjust(self._print_tab_len - 1
                                      - str_print.__len__(), '~')
            str_print += '  (v{})'.format(
                self._hdf_lapd_version.decode('utf-8'))
        else:
            str_print += ' no'.rjust(self._print_tab_len - 1
                                     - str_print.__len__(), '~')

        print(str_print + '\n')

    def check_msi(self):
        """
            Check for the existence of the MSI Group.
        """
        msi_detected = False
        for key in self._hdf_obj.keys():
            if key.casefold() == self._msi_group.casefold():
                msi_detected = True

        str_msi = self._msi_group + '/ '
        if msi_detected:
            str_msi += ' yes'.rjust(self._print_tab_len - 1
                                    - str_msi.__len__(), '~')
            print(str_msi)

            self.check_msi_diagnostic_all()
        else:
            str_msi += 'no'.rjust(self._print_tab_len - 1
                                  - str_msi.__len__(), '~')
            print(str_msi)

            raise NoMSIError

    def check_msi_diagnostic_all(self):
        """
            Check for all pre-defined MSI Diagnostic groups.

            Pre-defined diagnostic groupd are set in
            self._msi_diagnostic_groups,
        """
        for diag in self._msi_diagnostic_groups:
            self.check_msi_diagnostic(diag)

    def check_msi_diagnostic(self, diag_group_name):
        """
            Check for an MSI diagnostc group by the name of
            diag_group_name.

            :param diag_group_name:
            :return:
        """
        diag_detected = False

        for key in self._hdf_obj[self._msi_group].keys():
            if key.casefold() == diag_group_name.casefold():
                diag_detected = True

        str_print = '|-- ' + diag_group_name + ' '
        if diag_detected:
            str_print += ' yes'.rjust(self._print_tab_len - 1
                                      - str_print.__len__(), '~')
        else:
            str_print += ' no'.rjust(self._print_tab_len - 1
                                     - str_print.__len__(), '~')

        print(str_print)

    def check_data_group(self):
        """
            Check for the existence of the 'Raw data + config' Group.
        """
        data_detected = False
        for key in self._hdf_obj.keys():
            if key.casefold() == self._data_group.casefold():
                data_detected = True

        str_print = self._data_group + '/ '
        if data_detected:
            str_print += ' yes'.rjust(self._print_tab_len - 1
                                      - str_print.__len__(), '~')
        else:
            str_print += 'no'.rjust(self._print_tab_len - 1
                                    - str_print.__len__(), '~')

        print(str_print)
