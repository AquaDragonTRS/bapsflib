# This file is part of the bapsflib package, a Python toolkit for the
# BaPSF group at UCLA.
#
# http://plasma.physics.ucla.edu/
#
# Copyright 2017 Erik T. Everson and contributors
#
# License:
#

import h5py
import os
import sys

from .hdferrors import *
from .hdfmappers import get_hdfMap


class hdfCheck(object):
    _hdf_lapd_version = ''
    _print_found_tab = 35
    _print_note_tab = 7

    def __init__(self, hdf_obj):
        if isinstance(hdf_obj, h5py.File):
            self._hdf_obj = hdf_obj
        else:
            raise NotHDFFileError

        status = self.is_lapd_generated(silent=False)[0]
        if status:
            self._hdf_map = get_hdfMap(self._hdf_lapd_version)
            self.full_check()

    def full_check(self):
        """
            Run all pre-defined file checks.
        """
        str_title = ('Item'.ljust(self._print_found_tab)
                     + 'Found'.ljust(self._print_note_tab)
                     + 'Note')

        print(str_title)
        status = self.exist_msi(silent=False)
        if status:
            self.exist_msi_diagnostics_all(silent=False)
        self.exist_data_group(silent=False)
        self.exist_sis_group(silent=False)

    def is_lapd_generated(self, silent=True):
        """
            Checks the loaded HDF5 file to see if it was generated by
            the LaPD Control System.

            :param silent:
            :return:
        """
        if silent:
            sys.stdout = open(os.devnull, 'w')

        str_print = (
            'Generated by LaPD '.ljust(self._print_found_tab - 1, '~')
            + ' ')

        is_lapd = False
        for key in self._hdf_obj.attrs.keys():
            if 'lapd' in key.casefold() and 'version' in key.casefold():
                self._hdf_lapd_version = \
                    self._hdf_obj.attrs[key].decode('utf-8')
                is_lapd = True
                break

        if is_lapd:
            str_print += 'yes'.ljust(self._print_note_tab)
            str_print += '(v{})'.format(self._hdf_lapd_version)
        else:
            str_print += 'no'.ljust(self._print_note_tab)
            raise NotLaPDHDFError

        print(str_print + '\n')

        if silent:
            sys.stdout = sys.__stdout__

        return is_lapd, self._hdf_lapd_version

    def exist_msi(self, silent=True):
        """
            Check for the existence of the MSI Group.

            :param silent:
            :return:
        """
        if silent:
            sys.stdout = open(os.devnull, 'w')

        msi_detected = False
        for key in self._hdf_obj.keys():
            if key.casefold() == self._hdf_map.msi_group.casefold():
                msi_detected = True

        str_print = self._hdf_map.msi_group + '/ '
        str_print = (str_print.ljust(self._print_found_tab - 1, '~')
                     + ' ')
        if msi_detected:
            str_print += 'yes'.ljust(self._print_note_tab)
            print(str_print)
        else:
            str_print += 'no'.ljust(self._print_note_tab)
            print(str_print)

            raise NoMSIError

        if silent:
            sys.stdout = sys.__stdout__

        return msi_detected

    def exist_msi_diagnostic(self, diag_group_name, silent=True):
        """
            Check for an MSI diagnostc group by the name of
            diag_group_name.

            :param diag_group_name
            :param silent:
            :return:
        """
        if silent:
            sys.stdout = open(os.devnull, 'w')

        diag_detected = False

        # scan if diag_group_name is among the sub-groups in the MSI
        # group
        for key in self._hdf_obj[self._hdf_map.msi_group].keys():
            if key.casefold() == diag_group_name.casefold():
                diag_detected = True
                break

        # check if the diag_group_name is known in the pre-defined
        # mapping context
        diag_in_context = False
        for name in self._hdf_map.msi_diagnostic_groups:
            if name.casefold() == diag_group_name.casefold():
                diag_in_context = True
                break

        str_print = '|-- ' + diag_group_name + ' '
        str_print = (str_print.ljust(self._print_found_tab - 1, '~')
                     + ' ')
        if diag_detected:
            str_print += 'yes'.ljust(self._print_note_tab)
        else:
            str_print += 'no'.ljust(self._print_note_tab)

        if diag_in_context:
            str_print += 'in mapping context'

        print(str_print)

        if silent:
            sys.stdout = sys.__stdout__

        return diag_detected

    def exist_msi_diagnostics_all(self, silent=True):
        """
            Check for all pre-defined MSI Diagnostic groups.

            Pre-defined diagnostic group are set in
            self._msi_diagnostic_groups,

            :param silent:
            :return:
        """
        all_diags_exist = False

        all_possible_groups = \
            list(self._hdf_obj[self._hdf_map.msi_group])
        all_possible_groups.extend(self._hdf_map.msi_diagnostic_groups)
        all_possible_groups.sort()
        all_possible_groups = list(set(all_possible_groups))
        all_possible_groups.sort()

        for ii, diag in enumerate(all_possible_groups):
            status = self.exist_msi_diagnostic(diag, silent=silent)

            if ii == 0:
                all_diags_exist = status
            else:
                all_diags_exist = (all_diags_exist and status)

        return all_diags_exist, self._hdf_map.msi_diagnostic_groups

    def exist_data_group(self, silent=True):
        """
            Check for the existence of the 'Raw data + config' Group.

            :param silent:
            :return:
        """
        if silent:
            sys.stdout = open(os.devnull, 'w')

        data_detected = False
        for key in self._hdf_obj.keys():
            if key.casefold() == self._hdf_map.data_group.casefold():
                data_detected = True

        str_print = self._hdf_map.data_group + '/ '
        str_print = (str_print.ljust(self._print_found_tab - 1, '~')
                     + ' ')
        if data_detected:
            str_print += 'yes'.ljust(self._print_note_tab)
        else:
            str_print += 'no'.ljust(self._print_note_tab)

        print(str_print)

        if silent:
            sys.stdout = sys.__stdout__

        return data_detected

    def exist_sis_group(self, silent=True):
        """
            Check for existence of SIS group.

            :param silent:
            :return:
        """
        if silent:
            sys.stdout = open(os.devnull, 'w')

        detected = (self._hdf_map.sis_path()
                    in self._hdf_obj.listHDF_files)

        str_print = '|-- ' + self._hdf_map.sis_group + ' '
        str_print = (str_print.ljust(self._print_found_tab - 1, '~')
                     + ' ')
        if detected:
            str_print += 'yes'.ljust(self._print_note_tab)
        else:
            str_print += 'no'.ljust(self._print_note_tab)

        print(str_print)

        if silent:
            sys.stdout = sys.__stdout__

        return detected
