# This file is part of the bapsflib package, a Python toolkit for the
# BaPSF group at UCLA.
#
# http://plasma.physics.ucla.edu/
#
# Copyright 2017 Erik T. Everson and contributors
#
# License:
#
'''
Check Template

Generated by LaPD ~~~~~~~~~~~~~~~~ yes    (v1.1)
Item                               Found  Note
MSI/ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ yes
|-- Discharge ~~~~~~~~~~~~~~~~~~~~ yes    in mapping context
|-- Gas pressure ~~~~~~~~~~~~~~~~~ yes    in mapping context
|-- Heater ~~~~~~~~~~~~~~~~~~~~~~~ yes    in mapping context
|-- Interferometer array ~~~~~~~~~ yes    in mapping context
|-- Magnetic field ~~~~~~~~~~~~~~~ yes    in mapping context
Raw data + config/ ~~~~~~~~~~~~~~~ yes
|-- SIS 3301 ~~~~~~~~~~~~~~~~~~~~~ yes
|-- |-- Configurations Detected
|-- |-- |-- 'config name'                 used/ not used
|-- |-- |-- |-- 'crate'
|-- |-- |-- |-- |-- 14-bit, 100 MHz
|-- |-- |-- |-- |-- Connections (br, [ch,])
|-- |-- |-- |-- |-- |-- (0, [1,2,5])
|-- |-- |-- |-- |-- |-- (1, [3,4,5])
'''
import h5py
import os
import sys

from .hdferrors import NotHDFFileError, NotLaPDHDFError, NoMSIError
from .hdfmappers import hdfMap


class hdfCheck(object):

    def __init__(self, hdf_obj):
        if isinstance(hdf_obj, h5py.File):
            self.__hdf_obj = hdf_obj
        else:
            raise NotHDFFileError

        self._hdf_lapd_version = ''
        status = self.is_lapd_generated(silent=False)[0]
        if status:
            self.__hdf_map = hdfMap(hdf_obj)
            self.full_check()

    def full_check(self):
        """
            Run all pre-defined file checks.
        """
        status_print('Item', 'Found', 'Note', item_found_pad=' ')

        status = self.exist_msi(silent=False)
        if status:
            self.check_all_msi_diagnostics(silent=False)
        self.exist_data_group(silent=False)
        #status = self.exist_sis_group(silent=False)
        #if status:
        #    self.identify_data_configs()

    def is_lapd_generated(self, silent=True):
        """
            Checks the loaded HDF5 file to see if it was generated by
            the LaPD Control System.

            :param silent:
            :return:
        """
        if silent:
            sys.stdout = open(os.devnull, 'w')

        is_lapd = False
        for key in self.__hdf_obj.attrs.keys():
            if 'lapd' in key.casefold() and 'version' in key.casefold():
                self._hdf_lapd_version = \
                    self.__hdf_obj.attrs[key].decode('utf-8')
                is_lapd = True
                break

        item = 'Generated by LaPD'
        found = 'yes' if is_lapd else 'no'
        note = '(v{})\n'.format(self._hdf_lapd_version) if is_lapd\
            else '\n'
        status_print(item, found, note)

        if not is_lapd:
            raise NotLaPDHDFError

        if silent:
            sys.stdout = sys.__stdout__

        return is_lapd, self._hdf_lapd_version

    def exist_msi(self, silent=True):
        """
        Check for the existence of the MSI Group.

        :param silent:
        :return:
        """
        # go to a Null print if silent=True
        if silent:
            sys.stdout = open(os.devnull, 'w')

        # the __hdf_map.msi attribute is None if hdfMap() can not find
        # the msi groupd defined by __hdf_map.msi_group
        if self.__hdf_map.msi is None:
            msi_detected = False
        else:
            msi_detected = True

        # print status to screen
        item = self.__hdf_map.msi_group +'/'
        found = 'yes' if msi_detected else 'no'
        status_print(item, found, '')

        # raise Error if MSI is not detected
        if not msi_detected:
            raise NoMSIError

        # return to normal print
        if silent:
            sys.stdout = sys.__stdout__

        return msi_detected

    def exist_msi_diagnostic(self, diag_group_name, silent=True):
        """
        Check for an MSI diagnostic group by the name of
        diag_group_name.

        :param diag_group_name
        :param silent:
        :return:
        """
        if silent:
            sys.stdout = open(os.devnull, 'w')

        diag_detected = False

        # scan if diag_group_name is among the sub-groups in the MSI
        # group
        if diag_group_name in self.__hdf_map.msi.found_diagnostics:
            diag_detected = True

        # check if the diag_group_name is known in the pre-defined
        # mapping context
        diag_in_context = \
            self.__hdf_map.msi.is_diagnostic_in_context(diag_group_name)

        item = diag_group_name + ' '
        found = 'yes' if diag_detected else 'no'
        note = 'in mapping context' if diag_in_context else ''
        status_print(item, found, note, indent=1)

        if silent:
            sys.stdout = sys.__stdout__

        return diag_detected

    def check_all_msi_diagnostics(self, silent=True):
        """
        Check for all pre-defined MSI Diagnostic groups.

        Pre-defined diagnostic group are set in
        self._msi_diagnostic_groups,

        :param silent:
        :return:
        """
        for ii, diag in enumerate(self.__hdf_map.msi.found_diagnostics):
            self.exist_msi_diagnostic(diag, silent=silent)

    def exist_data_group(self, silent=True):
        """
        Check for the existence of the 'Raw data + config' Group.

        :param silent:
        :return:
        """
        # go to a Null print if silent=True
        if silent:
            sys.stdout = open(os.devnull, 'w')

        # the __hdf_map.digitizer attribute is None if hdfMap() can not
        # find the data groupd defined by __hdf_map.data_group
        if self.__hdf_map.digitizers is None:
            data_detected = False
        else:
            data_detected = True

        # print status to screen
        item = self.__hdf_map.data_group + '/ '
        found = 'yes' if data_detected else 'no'
        status_print(item, found, '')

        # return to normal print
        if silent:
            sys.stdout = sys.__stdout__

        return data_detected

    def exist_sis_group(self, silent=True):
        """
        Check for existence of SIS group.

        :param silent:
        :return:
        """
        if silent:
            sys.stdout = open(os.devnull, 'w')

        detected = (self.__hdf_map.sis_path
                    in self.__hdf_obj.listHDF_files)

        item = self.__hdf_map.sis_group + ' '
        found = 'yes' if detected else 'no'
        status_print(item, found, '', indent=1)

        if silent:
            sys.stdout = sys.__stdout__

        return detected

    def identify_data_configs(self):
        if self.__hdf_map.data_configs.keys().__len__() != 0:
            status_print('Configurations Detected', '', '', indent=2,
                         item_found_pad=' ')

            for key in self.__hdf_map.data_configs.keys():
                # print configuration name
                item = key
                found = ''
                note = 'used' \
                    if self.__hdf_map.data_configs[key]['active'] \
                    else 'not used'
                status_print(item, found, note, indent=3,
                             item_found_pad=' ')

                # print crate details for configuration
                for crate in self.__hdf_map.data_configs[key]['crates']:
                    # crate name
                    item = crate + ' crate connections'
                    note = '(brd, [ch, ...])'
                    status_print(item, '', note, indent=4,
                                 item_found_pad=' ')

                    # crate connections
                    nconns = len(
                        self.__hdf_map.data_configs[key][crate])
                    for iconn in range(nconns):
                        conns = self.__hdf_map.data_configs[key][
                            crate][iconn][0:2]
                        daq_stats = self.__hdf_map.data_configs[key][
                            crate][iconn][2]
                        item = '{}'.format(conns)
                        note = '{0}-bit, {1} {2}'.format(
                            daq_stats['bit'],
                            daq_stats['sample rate'][0],
                            daq_stats['sample rate'][1])
                        status_print(item, '', note, indent=5,
                                     item_found_pad=' ')
        else:
            status_print('Configurations Detected', '', 'None',
                         indent=2,
                         item_found_pad=' ')

    def get_hdf_mapping(self):
        return self.__hdf_map


def status_print(item, found, note, indent=0, item_found_pad='~'):
    _found_tab = 55
    _note_tab = 7

    str_print = ('|-- ' * indent) + str(item) + ' '
    str_print = str_print.ljust(_found_tab - 1, item_found_pad) + ' '
    str_print += str(found).ljust(_note_tab) + str(note)

    print(str_print)
