# This file is part of the bapsflib package, a Python toolkit for the
# BaPSF group at UCLA.
#
# http://plasma.physics.ucla.edu/
#
# Copyright 2017-2018 Erik T. Everson and contributors
#
# License: Standard 3-clause BSD; see "LICENSES/LICENSE.txt" for full
#   license terms and contributor agreement.
#
# TODO: create a save to file for report
#
# Check Template
#
# Generated by LaPD ~~~~~~~~~~~~~~~~ yes    (v1.1)
# Item                               Found  Note
# MSI/ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ yes
# |-- Discharge ~~~~~~~~~~~~~~~~~~~~ yes    in mapping context
# |-- Gas pressure ~~~~~~~~~~~~~~~~~ yes    in mapping context
# |-- Heater ~~~~~~~~~~~~~~~~~~~~~~~ yes    in mapping context
# |-- Interferometer array ~~~~~~~~~ yes    in mapping context
# |-- Magnetic field ~~~~~~~~~~~~~~~ yes    in mapping context
# Raw data + config/ ~~~~~~~~~~~~~~~ yes
# |-- Data run sequence ~~~~~~~~~~~~ yes
# |-- Control Devices ~~~~~~~~~~~~~~ yes
# |   |-- (list group names)
# |-- Digitizers ~~~~~~~~~~~~~~~~~~~ yes
# |   |-- (list group names)
# |-- Unknown ~~~~~~~~~~~~~~~~~~~~~~ yes
# |   |-- (list group names)
#
# Digitizer Report
# |-- SIS 3301 (main)
# |-- |-- Configurations Detected (#)       (# active, # inactive)
# |-- |-- |-- 'config name'                 used/ not used
# |-- |-- |-- |-- Path: 'path to config group'
# |-- |-- |-- |-- 'SIS 3301' adc connections    (brd, [ch, ...])
# |-- |-- |-- |-- |-- (0, [1,2,5])          ##-bit, ## MHz,
#                                           shot ave. #, sample ave. #
#
# Control Report
# |-- 6K Compumotor
# |-- |-- contype: 'motion'
# |-- |-- Configurations Detected (#)
# |-- |-- |-- 'config name'
# |-- Waveform
import h5py
import os
import sys

import pprint as pp

from .hdfmapper import hdfMap
from .hdferrors import NotHDFFileError, NotLaPDHDFError, NoMSIError

from contextlib import contextmanager
from datetime import datetime
from bapsflib import lapdhdf


class hdfOverview(object):
    """
    Initiates the HDF5 mapping constructor
    (:class:`~.hdfmapper.hdfMap`) and prints a file report to screen
    (or file).
    """
    def __init__(self, hdf_obj, save_it=False):
        """
        :param hdf_obj: HDF5 file map object
        :type hdf_obj: :class:`bapsflib.lapdhdf.files.File`
        :param save_it: :code:`False` (default). Set :code:`True` to
            save file report to a txt file of the same name as the HDF5
            file or set to string to specify file name.
        :type save_it: bool or str
        """
        # TODO: enable :data:`save_it` keyword

        # store an instance of the HDF5 file object for hdfOverview
        if isinstance(hdf_obj, lapdhdf.File):
            self.__hdf_obj = hdf_obj
            self.__hdf_map = hdf_obj.file_map
        else:
            raise ValueError('input arg is not of type hdfMap')

        # print overview
        if save_it is False:
            self.print_overview()
        else:
            self.save(save_it)

    def print_overview(self):
        """
        Run all pre-defined file checks.
        """
        # TODO: add a version # to 'Generated by bapsflib'
        # TODO: add a self.report_msi
        # TODO: add a self.report_data_run_sequence
        # TODO: add a self.report_motion_lists
        #
        # ------ Print General Info                               ------
        # File Header
        print('=' * 72)
        print('{} Overview'.format(self.__hdf_obj.info['filename']))
        print('Generated by bapsflib')
        print('Generated date: '
              + datetime.now().strftime('%-m/%-d/%Y %-I:%M:%S %p'))
        print('=' * 72 + '\n\n')

        # print basic file info
        print('Filename:     {}'.format(
            self.__hdf_obj.info['filename']))
        print('Abs. Path:    {}'.format(
            self.__hdf_obj.info['absolute file path']))
        print('LaPD version: {}'.format(
            self.__hdf_obj.info['lapd version']))
        print('Investigator: {}'.format(
            self.__hdf_obj.info['investigator']))
        print('Run Date:     {}'.format
              (self.__hdf_obj.info['run date']))

        # exp. and run structure
        print('\nExp. and Run Structure:')
        print('  (set)  {}'.format(self.__hdf_obj.info['exp set name']))
        print('  (exp)  +-- {}'.format(self.__hdf_obj.info['exp name']))
        print('  (run)  |   +-- {}'.format(
            self.__hdf_obj.info['run name']))

        # print run description
        print('\nRun Description:')
        for line in self.__hdf_obj.info['run description'].splitlines():
            print('    ' + line)

        # print exp description
        print('\nExp. Description:')
        for line in self.__hdf_obj.info['exp description'].splitlines():
            print('    ' + line)

        # ------ Print Brief Report                               ------
        # print header
        print('\n\nDiscovery Report')
        print('----------------\n')

        # print msi
        self.print_msi_discovery()

        # print data
        self.print_data_discovery()

        # ------ Print Detailed Reports                           ------
        # print header
        print('\n\nDetailed Reports')
        print('-----------------')

        # digitizer report
        self.report_digitizers()

        # control devices report
        self.report_controls()

        # msi report
        self.report_msi()

    def save(self, filename):
        """Saves the HDF5 overview to a text file."""
        if filename is True:
            # use the same name as the HDF5 file
            filename = os.path.splitext(self.__hdf_obj.filename)[0]\
                       + '.txt'

        # write to file
        with open(filename, 'w') as of:
            sys.stdout = of
            self.print_overview()

        # return to standard output
        sys.stdout = sys.__stdout__

    def print_msi_discovery(self):
        """
        Check for the existence of the MSI Group.
        """
        # is there a MSI
        msi_detected = self.__hdf_map.has_msi_group

        # print status to screen
        item = self.__hdf_map._MSI_GNAME + '/'
        found = 'found' if msi_detected else 'missing'
        status_print(item, found, '', item_found_pad=' ')

        # print number of diagnostics
        ndiag = len(self.__hdf_map.msi)
        item = 'diagnostics ({})'.format(ndiag)
        status_print(item, '', '', indent=1)

        # list diagnostics
        for diag in self.__hdf_map.msi:
            status_print(diag, '', '', indent=2)

    def print_data_discovery(self):
        """
        Check for the existence of the 'Raw data + config' Group.
        """
        # is there a 'Raw data + config'
        data_detected = self.__hdf_map.has_data_group

        # print status to screen
        item = self.__hdf_map._DATA_GNAME + '/ '
        found = 'found' if data_detected else 'missing'
        status_print(item, found, '')

        # ---- Data run Sequence                                    ----
        item = 'Data run sequence'
        found = '' \
            if self.__hdf_map.has_data_run_sequence \
            else 'not mapped'
        status_print(item, found, '', indent=1)

        # ---- Digitizers                                           ----
        item = 'digitizers ({})'.format(len(self.__hdf_map.digitizers))
        status_print(item, '', '', indent=1)

        # list digitizers
        for digi in self.__hdf_map.digitizers:
            item = digi
            if digi == self.__hdf_map.main_digitizer.digi_name:
                item += ' (main)'
            status_print(item, '', '', indent=2)

        # ---- Control Devices                                      ----
        item = 'control devices ({})'.format(
            len(self.__hdf_map.controls))
        status_print(item, '', '', indent=1)

        # list controls
        for control in self.__hdf_map.controls:
            status_print(control, '', '', indent=2)

        # ---- Unknowns                                             ----
        item = 'unknowns ({})'.format(len(self.__hdf_map.unknowns))
        note = 'aka unmapped'
        status_print(item, note, '', indent=1)

        # list unknowns
        for unknown in self.__hdf_map.unknowns:
            status_print(unknown, '', '', indent=2)

    def report_msi(self):
        """
        Prints to screen a report of all detected MSI diagnostics and
        their configurations.
        """
        # print heading
        print('\n\nMSI Diagnostic Report')
        print('^^^^^^^^^^^^^^^^^^^^^\n')

        # print msi diagnostic config
        for diag in self.__hdf_map.msi.values():
            # print msi diag name
            status_print(diag.diagnostic_name, '', '')

            # print path to diagnostic
            item = 'path:  ' + diag.info['group path']
            status_print(item, '', '', indent=1)

            # print the configs dict
            self.report_msi_configs(diag)

    @staticmethod
    def report_msi_configs(mmap):
        """
        Report the configs for MSI diagnostic with mmap.

        :param mmap: map of MSI diagnostic
        """
        # print configs title
        status_print('configs', '', '', indent=1)

        # pretty print the configs dict
        ppconfig = pp.pformat(mmap.configs)
        for line in ppconfig.splitlines():
            status_print(line, '', '', indent=2)

    def report_digitizers(self):
        """
        Prints to screen a report of all detected digitizers and their
        configurations.
        """
        # print heading
        print('\n\nDigitizer Report')
        print('^^^^^^^^^^^^^^^^\n')

        # print digitizer config
        for key in self.__hdf_map.digitizers:
            # print digitizer name
            item = key
            if key in self.__hdf_map.main_digitizer.info['group name']:
                item += ' (main)'
            status_print(item, '', '')

            # print adc's
            # noinspection PyProtectedMember
            item = "adc's:  "\
                   + str(self.__hdf_map.digitizers[key]._predefined_adc)
            status_print(item, '', '', indent=1)

            # print digitizer configs
            self.report_digitizer_configs(
                self.__hdf_map.digitizers[key])

    @staticmethod
    def report_digitizer_configs(digi):
        """
        Prints to screen information about the passed digitizer
        configurations.

        :param digi: an instance of a single member of
            `hdfMap.digitizers`
        """
        if len(digi.configs) != 0:
            nconfigs = len(digi.configs)
            nconf_active = 0
            for key in digi.configs:
                if digi.configs[key]['active']:
                    nconf_active += 1

            item = 'Configurations Detected ({})'.format(nconfigs)
            note = '({0} active, {1} inactive)'.format(
                nconf_active, nconfigs - nconf_active)
            status_print(item, '', note, indent=1, item_found_pad=' ')

            for conf in digi.configs:
                # print configuration name
                item = conf
                found = ''
                note = 'active' if digi.configs[conf]['active'] \
                    else 'NOT active'
                status_print(item, found, note, indent=2,
                             item_found_pad=' ')

                # print active adc's
                item = "adc's (active):  "\
                       + str(digi.configs[conf]['adc'])
                status_print(item, '', '', indent=3)

                # print path for config
                item = 'path: '\
                       + digi.configs[conf]['group path']
                status_print(item, '', '', indent=3, item_found_pad=' ')

                # print adc details for configuration
                for adc in digi.configs[conf]['adc']:
                    # adc name
                    item = adc + ' adc connections'
                    status_print(item, '', '', indent=3,
                                 item_found_pad=' ')

                    # print adc header
                    line_indent = ('|   ' * 4) + '+-- '
                    line = line_indent + '(brd, [ch, ...])'
                    line = line.ljust(51)
                    line += 'bit'.ljust(5)
                    line += 'sample rate'.ljust(13)
                    line += 'nshotnum'.ljust(10)
                    line += 'nt'.ljust(10)
                    line += 'shot ave.'.ljust(11)
                    line += 'sample ave.'
                    print(line)

                    # adc connections
                    nconns = len(digi.configs[conf][adc])
                    for iconn in range(nconns):
                        conns = digi.configs[conf][adc][iconn][0:2]
                        adc_stats = digi.configs[conf][adc][iconn][2]

                        # construct and print line
                        line = line_indent + str(conns)
                        line = line.ljust(51)
                        line += str(adc_stats['bit']).ljust(5)
                        line += '{0} {1}'.format(
                            adc_stats['sample rate'][0],
                            adc_stats['sample rate'][1]).ljust(13)
                        line += str(adc_stats['nshotnum']).ljust(10)
                        line += str(adc_stats['nt']).ljust(10)
                        line += str(
                            adc_stats['shot average (software)']
                        ).ljust(11)
                        line += str(
                            adc_stats['sample average (hardware)'])
                        print(line)
        else:
            status_print('Configurations Detected (0)', '', '',
                         indent=1)

    def report_controls(self):
        """
        Prints to screen a report of all control devices and their
        configurations.
        """
        # print heading
        print('\n\nControl Device Report')
        print('^^^^^^^^^^^^^^^^^^^^^\n')

        # print control config
        for control in self.__hdf_map.controls.values():
            # print control name
            status_print(control.name, '', '')

            # print path to control
            item = 'path:     ' + control.info['group path']
            status_print(item, '', '', indent=1)

            # print path to contype
            item = 'contype:  ' + control.contype
            status_print(item, '', '', indent=1)

            # print configurations
            self.report_control_configs(control)

    @staticmethod
    def report_control_configs(cmap):
        """
        Report the configs for control associated with cmap.

        :param cmap: map of control device
        """
        if len(cmap.configs) != 0:
            # display number of configurations
            item = 'Configurations Detected ({})'.format(
                len(cmap.configs))
            status_print(item, '', '', indent=1)

            # display config values
            for config_name, config in cmap.configs.items():
                # print config_name
                status_print(config_name, '', '', indent=2)

                # get pretty print string
                ppconfig = pp.pformat(config)
                for line in ppconfig.splitlines():
                    status_print(line, '', '', indent=3)

        else:
            item = 'Configurations Detected (0)'
            status_print(item, '', '', indent=1)


def status_print(item, found, note, indent=0,
                 item_found_pad=' ', found_tab=55):
    """
    Stylistic status printing for :py:class:`hdfOverview`

    :param item: `str` for item (1st) column
    :param found: `str` for found (2nd) column
    :param note: `str` for note (3rd) column
    :param indent: `int` num. of indentations for `item` display
    :param item_found_pad: `str` pad style between `item` and `found`
    """
    note_tab = 7

    if indent == 0:
        str_print = ''
    elif indent == 1:
        str_print = '+-- '
    else:
        str_print = ('|   ' * (indent - 1)) + '+-- '
    str_print += str(item) + ' '
    str_print = str_print.ljust(found_tab - 1, item_found_pad) + ' '
    str_print += str(found).ljust(note_tab) + str(note)

    print(str_print)
